{"version":3,"file":"static/js/736.5e97265f.chunk.js","mappings":"2PAEaA,GAAaC,EAAAA,EAAAA,IAAO,KAAPA,CAAH,oDAGVC,GAAaD,EAAAA,EAAAA,IAAO,KAAPA,CAAH,wGAMVE,GAAaF,EAAAA,EAAAA,IAAO,IAAPA,CAAH,gE,IAKIA,EAAAA,EAAAA,IAAO,IAAPA,CAAH,mF,iBCTXG,EAAO,WAClB,IAoBIC,EApBJ,GAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BH,EAAAA,EAAAA,YAA5B,eAAOK,EAAP,KAAeC,EAAf,KAcA,IAZAC,EAAAA,EAAAA,YAAU,WACRL,GAAW,IACXM,EAAAA,EAAAA,GAAUC,OAAON,IACdO,KAAKJ,GACLK,OAAM,SAAAC,GAAK,OACVC,EAAAA,OAAAA,QACE,+CACAD,EAAME,SAHE,IAMXC,QAAQb,GAAW,GACvB,GAAE,CAACC,KACCE,EACH,OAAO,KAIT,IAAQW,EAASX,EAATW,KAER,OACE,UAACpB,EAAD,WACGK,IACC,SAAC,KAAD,CACEgB,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,kBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,IAGZP,EAAKQ,KAAI,SAAAC,GAMR,OAJE1B,EADE0B,EAAMC,aACE,0CAAsCD,EAAMC,cAE5C,6HAGV,UAAChC,EAAD,YACE,gBAAKiC,IAAK5B,EAAYmB,MAAM,MAAMD,OAAO,MAAMW,IAAKH,EAAMI,QAC1D,SAAChC,EAAD,UAAa4B,EAAMI,SAFJJ,EAAMK,GAK1B,MAGN,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ActorsCard = styled('li')`\n  background-color: black;\n`;\nexport const ActorsList = styled('ul')`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 30px;\n`;\nexport const ActorsName = styled('p')`\n  color: white;\n  text-align: center;\n`;\n\nexport const ActorsError = styled('p')`\n  padding: px;\n  text-align: center;\n  font-size: 30px;\n`;","import { fetchCast } from '../../api/fetchApi';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Notify } from 'notiflix';\nimport { ActorsCard, ActorsList, ActorsName } from './Cast.styled.jsx';\nimport { Circles } from 'react-loader-spinner';\n\nexport const Cast = () => {\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n  const [actors, setActors] = useState();\n\n  useEffect(() => {\n    setLoading(true);\n    fetchCast(Number(movieId))\n      .then(setActors)\n      .catch(error =>\n        Notify.failure(\n          'Ooops, something broke. Try again please... ',\n          error.messages\n        )\n      )\n      .finally(setLoading(false));\n  }, [movieId]);\n  if (!actors) {\n    return null;\n  }\n\n  let posterPath;\n  const { cast } = actors;\n\n  return (\n    <ActorsList>\n      {loading && (\n        <Circles\n          height=\"80\"\n          width=\"80\"\n          color=\"#4fa94d\"\n          ariaLabel=\"circles-loading\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n        />\n      )}\n      {cast.map(actor => {\n        if (actor.profile_path) {\n          posterPath = `https://image.tmdb.org/t/p/w200/${actor.profile_path}`;\n        } else {\n          posterPath = `https://st.depositphotos.com/2101611/4338/v/600/depositphotos_43381243-stock-illustration-male-avatar-profile-picture.jpg`;\n        }\n        return (\n          <ActorsCard key={actor.id}>\n            <img src={posterPath} width=\"200\" height=\"300\" alt={actor.name} />\n            <ActorsName>{actor.name}</ActorsName>\n          </ActorsCard>\n        );\n      })}\n    </ActorsList>\n  );\n};"],"names":["ActorsCard","styled","ActorsList","ActorsName","Cast","posterPath","useState","loading","setLoading","movieId","useParams","actors","setActors","useEffect","fetchCast","Number","then","catch","error","Notify","messages","finally","cast","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","map","actor","profile_path","src","alt","name","id"],"sourceRoot":""}